(define (filtered-foldl pred? op empty term a next b)
  (define (iter a result)
    (cond ((> a b) result)
          ((pred? a) 
           (iter (next a)
                 (op result (term a))))
          (else
           (iter (next a) result))))
  (iter a empty))

(define (filtered-foldr pred? op empty term a next b)
  (cond ((> a b) empty)
        ((pred? a)
         (op (term a)
             (filtered-foldr pred? op empty term (next a) next b)))
        (else
         (filtered-foldr pred? op empty term (next a) next b))))


(define (sum-of-primes a b)
  (define (square n)
    (* n n))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (prime? n)
    (and (not (or (= n 0) (= n 1)))
         (= n (smallest-divisor n))))
  (filtered-foldl prime? + 0 id a inc b))

(define (product-of-lesser-coprime n)
  (define (coprime? k)
    (= (gcd k n) 1))
  (filtered-foldl coprime? * 1 id 2 inc (- n 1)))