;; guile has no (runtime)
;; subtracting sums of pair returned by (gettimeofday) works

(define (square n)
  (* n n))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        ((= test-divisor 2) (find-divisor n 3))
        (else (find-divisor n (+ test-divisor 2)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else #f)))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define times 10)

(define (runtime)
  (let ((time (gettimeofday)))
    (+ (car time) (cdr time))))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n times)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time)
  (newline))

(define (search-for-primes lower upper)
  (cond ((even? lower) (search-for-primes (- lower 1) upper))
        ((> lower upper) (display "\nSearch complete.\n"))
        (else (begin
                (timed-prime-test lower)
                (search-for-primes (+ lower 2) upper)))))